version: '3.6'

services:

  adminer:
    image: adminer
    restart: always

    # metadata to registrator
    environment:
        SERVICE_NAME: adminer
        SERVICE_TAGS: dbs,admin

    # Deployment information
    deploy:
      replicas: 1
      mode: replicated
      endpoint_mode: vip
      update_config:
          parallelism: 1
          delay: 10s
      restart_policy:
          condition: on-failure
      labels:
        - traefik.enable=true
        - traefik.docker.lbswarm=true
        - traefik.docker.network=docker2docker
        - traefik.http.routers.adminer.entrypoints=web,websecure
        - traefik.http.routers.adminer.rule=Host(`adminer.docker.local`)
        - traefik.http.services.adminer.loadbalancer.server.port=8080
      resources:
        limits:
            cpus: '1.0'
            memory: 500M
    networks:
      - docker2docker

  mysql:
    image: mysql
    restart: always
    deploy:
      replicas: 0
      update_config:
          parallelism: 1
          delay: 10s
      restart_policy:
          condition: on-failure
      labels:
        - traefik.enable=false
    env_file:
      - ./.envs/mysql.env
      - ./.secrets/mysql.env
    volumes:
      - mysqld:/var/lib/mysql
    ports:
      - 3306
    networks:
      - docker2docker

  postgres:
    image: postgres
    restart: always
    deploy:
      replicas: 1
      update_config:
          parallelism: 1
          delay: 10s
      restart_policy:
          condition: on-failure
      labels:
        - traefik.enable=false
    env_file:
      - ./.envs/postgres.env
      - ./.secrets/postgres.env
    volumes:
      - "postgresql:/var/lib/postgresql/data"
      - ./configs/droneci_databases.sh:/docker-entrypoint-initdb.d/droneci_databases.sh:rw
    ports:
      - 5432
    networks:
      - docker2docker

networks:
  docker2docker:
      external: true
    
volumes:
  postgresql:
    external: true
  mysqld:
    external: true
