version: "3.9"

services:

  server_bitbucket:
    image: drone/drone:2
    deploy:
      labels:
        - traefik.enable=true
        - traefik.docker.lbswarm=true
        - traefik.docker.network=docker2docker
        - traefik.http.routers.bitbucket.entrypoints=web,websecure
        - traefik.http.routers.bitbucket.rule=Host(`droneci-bb.docker.local`)
        - traefik.http.services.bitbucket.loadbalancer.server.port=80
      mode: replicated
      replicas: 1
      placement:
        max_replicas_per_node: 1
      endpoint_mode: vip
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '1.0'
          memory: 500M
    environment:
      - DRONE_SERVER_HOST=${TRAEFIK_HUB_BB}
      - POSTGRES_PASSWORD=${POSTGRES_ROOT}
    env_file: 
      - ./.env/bitbucket.env
      - ./.secrets/bitbucket.env
    restart: always
    volumes:
      - drone-server-data:/var/lib/drone/
    networks:
      - docker2docker

  server_github:
    image: drone/drone:2
    deploy:
      labels:
        - traefik.enable=true
        - traefik.docker.lbswarm=true
        - traefik.docker.network=docker2docker
        - traefik.http.routers.github.entrypoints=web,websecure
        - traefik.http.routers.github.rule=Host(`droneci-gh.docker.local`)
        - traefik.http.services.github.loadbalancer.server.port=80
      mode: replicated
      replicas: 1
      placement:
        max_replicas_per_node: 1
      endpoint_mode: vip
      update_config:
        parallelism: 1
        failure_action: rollback
        delay: 10s
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '1.0'
          memory: 500M
    environment:
      - DRONE_SERVER_HOST=${TRAEFIK_HUB_GH}
      - POSTGRES_PASSWORD=${POSTGRES_ROOT}
    env_file: 
      - ./.env/github.env
      - ./.secrets/github.env
    restart: always
    volumes:
      - drone-server-data:/var/lib/drone/
    networks:
      - docker2docker

  runner:
    image: drone/drone-runner-docker:1
    command: agent
    deploy:
      labels:
        - traefik.enable=true
        - traefik.docker.network=docker2docker
        - traefik.docker.lbswarm=true
        - traefik.http.routers.runner.entrypoints=web
        - traefik.http.routers.runner.rule=Host(`droneci-runner.docker.local`) && PathPrefix(`/dashboard`)
        - traefik.http.services.runner.loadbalancer.server.port=3000
      mode: replicated
      replicas: 1
      placement:
        max_replicas_per_node: 1
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '1.0'
          memory: 500M
    env_file:
      - ./.env/runner.env
      - ./.secrets/runner.env
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks: 
      - docker2docker

volumes:
  drone-server-data:
    external: true
  db:
    external: true

networks: 
  docker2docker:
    external: true
