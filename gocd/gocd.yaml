version: '3.9'

services:

  # db:
  #   image: postgres
  #   restart: always
  #   ports:
  #     - 5433:5432
  #   environment:
  #     POSTGRES_PASSWORD: gocd_database_password
  #     POSTGRES_USER: gocd_database_user
  #     POSTGRES_DB: gocd
  #   volumes:
  #     - pgdata:/var/lib/postgresql/data
  #   networks:
  #     - docker2docker

  server:
    image: gocd/gocd-server:v21.2.0
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=docker2docker"
        - "traefik.docker.lbswarm=true"
        - "traefik.http.routers.gocd.entrypoints=web"
        - traefik.http.routers.gocd.rule=Host(`gocd.local`)
        - traefik.http.services.gocd.loadbalancer.server.port=8153
      mode: replicated
      replicas: 1
      placement:
        max_replicas_per_node: 1
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '1'
          memory: 1000M
    expose:
      - "8153:8153"
      - "8154:8154"
    volumes:
      - ./godata/server:/godata
    networks:
      - docker2docker

  alpine_dev_agent:
    image:  gocd/gocd-agent-alpine-3.13:v21.2.0
    environment:
      GO_SERVER_URL: http://gocd_server:8153/go
    deploy:
      labels:
        - "traefik.enable=false"
      mode: replicated
      replicas: 1
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '1'
          memory: 500M
    volumes:
      - ./godata/agent:/godata:ro
    networks:
      - docker2docker

networks:
  docker2docker:
    external: true

volumes:
  config:
    external: true
    name: gocd-configs
  pgdata:
    external: true
    name: postgres
  logs:
    external: true
    name: gocd-logs
